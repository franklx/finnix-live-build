#!/usr/bin/env python3

# SPDX-PackageSummary: finnix-live-build
# SPDX-FileComment: recompress chroot hook
# SPDX-FileCopyrightText: Copyright (C) 2020-2022 Ryan Finnie
# SPDX-License-Identifier: MPL-2.0

# Re-"compress" all .gz files at gzip level 0 so mksquashfs can compress
# it more efficiently

import argparse
import gzip
import hashlib
import logging
import pathlib
import shutil
import sys


def numfmt(
    num,
    fmt="{num.real:0.02f} {num.prefix}",
    binary=False,
    rollover=1.0,
    limit=0,
    prefixes=None,
):
    """Formats a number with decimal or binary prefixes

    num: Input number
    fmt: Format string of default repr/str output
    binary: If True, use divide by 1024 and use IEC binary prefixes
    rollover: Threshold to roll over to the next prefix
    limit: Stop after a specified number of rollovers
    prefixes: List of (decimal, binary) prefix strings, ascending
    """
    # SPDX-SnippetComment: Originally from https://github.com/rfinnie/rf-pymods
    # SPDX-SnippetCopyrightText: Copyright (C) 2020-2022 Ryan Finnie
    # SPDX-LicenseInfoInSnippet: MIT

    class NumberFormat(float):
        prefix = ""
        fmt = "{num.real:0.02f} {num.prefix}"

        def __str__(self):
            return self.fmt.format(num=self)

        def __repr__(self):
            return str(self)

    if prefixes is None:
        prefixes = [
            ("k", "Ki"),
            ("M", "Mi"),
            ("G", "Gi"),
            ("T", "Ti"),
            ("P", "Pi"),
            ("E", "Ei"),
            ("Z", "Zi"),
            ("Y", "Yi"),
        ]
    divisor = 1024 if binary else 1000
    if limit <= 0 or limit > len(prefixes):
        limit = len(prefixes)

    count = 0
    p = ""
    for prefix in prefixes:
        if num < (divisor * rollover):
            break
        if count >= limit:
            break
        count += 1
        num = num / float(divisor)
        p = prefix[1] if binary else prefix[0]
    ret = NumberFormat(num)
    ret.fmt = fmt
    ret.prefix = p
    return ret


class RecompressGz:
    args = None
    diversions = None
    file_count = 0
    pre_size = 0
    post_size = 0

    def __init__(self):
        self.diversions = {}

    def parse_args(self, argv=None):
        if argv is None:
            argv = sys.argv

        parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter
        )

        parser.add_argument(
            "--debug", action="store_true", help="Print debugging information"
        )
        parser.add_argument(
            "--base-dir",
            type=pathlib.Path,
            default="/",
            help="Base directory of Debian filesystem tree",
        )

        return parser.parse_args(args=argv[1:])

    def load_diversions(self):
        with self.args.base_dir.joinpath("var/lib/dpkg/diversions").open() as f:
            while True:
                orig = f.readline()
                if orig == "":
                    break
                orig = pathlib.Path(orig.rstrip())
                diverted_to = pathlib.Path(f.readline().rstrip())
                f.readline()  # Package name; we don't need
                self.diversions[orig] = diverted_to
        logging.debug("Loaded {} diversions".format(len(self.diversions)))

    def recompress(self, file):
        file_mod = pathlib.Path(str(file) + "~mod")
        file_size_pre = file.stat().st_size
        with gzip.open(file, "rb") as fsrc, file_mod.open("wb") as fdst:
            # Explicitly do not set filename and mtime in resulting .gz
            with gzip.GzipFile(
                filename="", mode="wb", compresslevel=0, mtime=0, fileobj=fdst
            ) as fdstgz:
                shutil.copyfileobj(fsrc, fdstgz)
        shutil.copystat(file, file_mod)
        file = file_mod.replace(file)
        file_size_post = file.stat().st_size

        self.file_count += 1
        self.pre_size += file_size_pre
        self.post_size += file_size_post

        logging.debug(
            "Recompressed {file} - {pre.real:0.02f} {pre.prefix}B to {post.real:0.02f} {post.prefix}B".format(
                file=file, pre=numfmt(file_size_pre), post=numfmt(file_size_post)
            )
        )
        return hashlib.md5(file.read_bytes()).hexdigest()

    def process_dpkg_file(self, dpkg_filename, orig_md5):
        if not dpkg_filename.endswith(".gz"):
            return orig_md5

        file = pathlib.Path("/").joinpath(dpkg_filename)
        if file in self.diversions:
            logging.debug(
                "{} was diverted to {} - using that instead".format(
                    file, self.diversions[file]
                )
            )
            file = self.diversions[file]

        file = self.args.base_dir.joinpath(*file.parts[1:])
        if file.is_symlink():
            logging.warning("File is a symlink, skipping: {}".format(file))
            return orig_md5
        fstat = file.stat()
        if fstat.st_nlink > 1:
            logging.warning(
                "File has {} hard links, skipping: {}".format(fstat.st_nlink, file)
            )
            return orig_md5
        found_md5 = hashlib.md5(file.read_bytes()).hexdigest()
        if orig_md5 != found_md5:
            logging.error(
                "MD5 mismatch (expected {}, got {}), skipping: {}".format(
                    orig_md5, found_md5, file
                )
            )
            return orig_md5

        return self.recompress(file)

    def main(self):
        self.args = self.parse_args()
        logging.basicConfig(
            level=(logging.DEBUG if self.args.debug else logging.INFO),
            format="%(asctime)s %(levelname)-8s %(message)s",
        )
        self.load_diversions()
        for file in self.args.base_dir.joinpath("var/lib/dpkg/info").glob("*.md5sums"):
            file_mod = pathlib.Path(str(file) + "~mod")
            file_output = ""
            with file.open() as f:
                for line in f:
                    orig_md5, dpkg_filename = line.rstrip().split("  ", 1)
                    new_md5 = self.process_dpkg_file(dpkg_filename, orig_md5)
                    file_output += "{}  {}\n".format(new_md5, dpkg_filename)
            file_mod.write_text(file_output)
            shutil.copystat(file, file_mod)
            file = file_mod.replace(file)

        logging.info(
            '{} files re-"compressed" at gzip level 0.'.format(self.file_count)
        )
        logging.info(
            "{pre.real:0.02f} {pre.prefix}B (previous gzip total) expanded to "
            "{post.real:0.02f} {post.prefix}B (gzip level 0).".format(
                pre=numfmt(self.pre_size), post=numfmt(self.post_size)
            )
        )
        ballpark_xz = int(self.post_size * 0.15)
        logging.info(
            "If subsequently compressed with xz, approximately {ballpark.real:0.02f} "
            "{ballpark.prefix}B might be saved ({ballpark_pct:0.02%} of previous gzip).".format(
                ballpark=numfmt(self.pre_size - ballpark_xz),
                ballpark_pct=((self.pre_size - ballpark_xz) / self.pre_size),
            )
        )


if __name__ == "__main__":
    sys.exit(RecompressGz().main())
