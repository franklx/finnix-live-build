#!/bin/sh

# SPDX-PackageSummary: finnix-live-build
# SPDX-FileCopyrightText: Copyright (C) 2020-2021 Ryan Finnie
# SPDX-License-Identifier: MPL-2.0

set -e

VERSION="frk-$(date +%Y%m%d)"

PRODUCT="${PRODUCT:-Finnix}"
PRODUCT_ID="${PRODUCT_ID:-finnix}"
VERSION="${VERSION:-dev}"
CODENAME="${CODENAME:-Sturgeon Bay}"
ARCH="${ARCH:-$(dpkg --print-architecture)}"
SOURCE_ISO="${SOURCE_ISO:-false}"
CACHE_FROZEN="${CACHE_FROZEN:-false}"
SAVE_ISO="${SAVE_ISO:-false}"
LINT="${LINT:-false}"
BUILD_TAGS="${BUILD_TAGS:-}"
PYTHON="${PYTHON:-python3}"

lock() {
    _file=$1
    exec 9>"${_file}"
    if ! flock -x -w 1 9; then
        echo "${_file} lock failed" >&2
        exit 1
    fi
}

cleanup() {
    for file in "${LINT_DIR}" "${compare_tmp_fn}" "${current_tmp_fn}" "${diff_tmp_fn}"; do
        [ -n "${file}" ] || continue
        [ -e "${file}" ] || continue
        rm -rf "${file}"
    done
}
trap cleanup EXIT

render() {
    env \
        "PRODUCT=${PRODUCT}" \
        "PRODUCT_ID=${PRODUCT_ID}" \
        "VERSION=${VERSION}" \
        "CODENAME=${CODENAME}" \
        "ARCH=${ARCH}" \
        "DATETIME=${DATETIME}" \
        "DATE=${DATE}" \
        "YEAR=${YEAR}" \
        "GIT_DESC=${GIT_DESC}" \
        "LIVE_BUILD_GIT_DESC=${LIVE_BUILD_GIT_DESC}" \
        "BUILD_TAGS=${BUILD_TAGS}" \
   "${BASE_DIR}/tools/jinja2-render"
}

# PACKAGES USED:
# Required: debootstrap (debootstrap): live-build initial bootstrap
# Required: debian-archive-keyring: live-build initial bootstrap
# Required: python3 (${PYTHON}): Templating
# Required: python3-jinja2: Templating
# Required: librsvg2-bin (rsvg-convert): splash.png
# Required: fonts-liberation2: splash.png
# Required: pandoc: Manpage builds
# Optional: shellcheck (shellcheck): Lint, required for LINT=true
# Optional: flake8 (${PYTHON} -mflake8): Lint, required for LINT=true
# Optional: git (git): Build IDs
# Optional: file (file): Post-build file info
# Optional: debian-ports-archive-keyring: Required for riscv64 architecture

host_commands="debootstrap ${PYTHON} rsvg-convert pandoc"
missing_commands=""
if [ "${LINT}" = "true" ]; then
    host_commands="${host_commands} shellcheck"
fi
for c in ${host_commands}; do
    command -v "${c}" >/dev/null || missing_commands="${missing_commands} ${c}"
done
if [ -n "${missing_commands}" ]; then
    echo "ERROR: Missing required commands:${missing_commands}" >&2
    exit 1
fi
if command -v dpkg >/dev/null 2>/dev/null; then
    if ! dpkg --compare-versions "$(debootstrap --version | cut -d' ' -f2)" ge 1.0.102; then
        echo "ERROR: debootstrap 1.0.102 or later is required"
        exit 1
    fi
fi
if [ "${LINT}" = "true" ]; then
    if ! "${PYTHON}" -mflake8 /dev/null; then
        echo "ERROR: flake8 is required for LINT=true"
        exit 1
    fi
fi

DATETIME="$(date -u +"%F %T")"
DATE="$(date -u +"%F")"
YEAR="$(date -u +"%Y")"
SQUASHFS_COMP="xz"
if [ "${ARCH}" = "amd64" ]; then
    BINARY_IMAGES="iso-hybrid"
    BOOTLOADERS="grub-efi,syslinux"
    ISO_FILENAME="${PRODUCT_ID}-${ARCH}.hybrid.iso"
    MEMTEST="memtest86+"
    SQUASHFS_COMP="xz -Xbcj x86"
elif [ "${ARCH}" = "i386" ]; then
    BINARY_IMAGES="iso-hybrid"
    BOOTLOADERS="grub-efi,syslinux"
    ISO_FILENAME="${PRODUCT_ID}-${ARCH}.hybrid.iso"
    MEMTEST="memtest86+"
    SQUASHFS_COMP="xz -Xbcj x86"
elif [ "${ARCH}" = "arm64" ]; then
    BINARY_IMAGES="iso-hybrid"
    BOOTLOADERS="grub-efi"
    ISO_FILENAME="${PRODUCT_ID}-${ARCH}.hybrid.iso"
    MEMTEST=""
else
    BINARY_IMAGES="iso"
    BOOTLOADERS=""
    ISO_FILENAME="${PRODUCT_ID}-${ARCH}.iso"
    MEMTEST=""
fi

if [ -z "${APT_HTTP_PROXY}" ]; then
    eval "$(apt-config shell APT_HTTP_PROXY Acquire::http::Proxy 2>/dev/null || true)"
fi

if [ "${LINT}" = "true" ]; then
    LINT_DIR="$(mktemp -d)"
    DATA_DIR="${DATA_DIR:-${LINT_DIR}}"
fi

BASE_DIR="${BASE_DIR:-$(dirname "$(readlink -f "$0")")}"
DATA_DIR="${DATA_DIR:-${BASE_DIR}/build}"
CACHE_DIR="${CACHE_DIR:-${DATA_DIR}/cache}"
LOCK_DIR="${LOCK_DIR:-${DATA_DIR}/lock}"
LOCK_NAME="${LOCK_NAME:-$(basename "$(readlink -f "$0")")}"
BUILD_INFO_DIR="${BUILD_INFO_DIR:-${DATA_DIR}/info}"
LB_DIR="${LB_DIR:-${DATA_DIR}/lb}"
LB_CACHE_DIR="${LB_CACHE_DIR:-${CACHE_DIR}/lb}"
LIVE_BUILD="${LIVE_BUILD:-${BASE_DIR}/live-build}"

GIT_DESC="$(git -C "${BASE_DIR}" describe --always --dirty 2>/dev/null || true)"
if [ -n "${GIT_DESC}" ]; then
    git -C "${BASE_DIR}" diff --quiet 2>/dev/null || BUILD_TAGS="${BUILD_TAGS} dirty"
fi
LIVE_BUILD_GIT_DESC=""

if [ "${LIVE_BUILD}" = "-" ]; then
    LIVE_BUILD=""
fi
export LIVE_BUILD
if [ -n "${LIVE_BUILD}" ]; then
    if [ ! -e "${LIVE_BUILD}/frontend/lb" ]; then
        echo "ERROR: ${LIVE_BUILD}/frontend/lb not found" >&2
        if [ "${LIVE_BUILD}" = "${BASE_DIR}/live-build" ]; then
            echo "You probably want: git -C \"${BASE_DIR}\" submodule update --init --recursive" >&2
        fi
        exit 1
    fi
    export PATH="${LIVE_BUILD}/frontend:${PATH}"
    LIVE_BUILD_GIT_DESC="$(git -C "${LIVE_BUILD}" describe --always --dirty 2>/dev/null || true)"
fi

BUILD_TAGS="${BUILD_TAGS} ${ARCH}"
if [ -t 0 ]; then
    BUILD_TAGS="${BUILD_TAGS} terminal"
fi
if [ -n "${SCHROOT_SESSION_ID}" ]; then
    BUILD_TAGS="${BUILD_TAGS} schroot"
fi
# (SC2154) Lowercase variable is conditionally set by systemd-nspawn,
# nothing we can do
# shellcheck disable=SC2154
if [ "${container}" = "systemd-nspawn" ]; then
    BUILD_TAGS="${BUILD_TAGS} systemd-nspawn"
fi

if [ -e /etc/os-release ]; then
    for i in BUILD_OS_ID BUILD_OS_VERSION_CODENAME BUILD_OS_VERSION_ID; do
        read -r "${i?}" || true
    done <<EOM
$(
    # (SC1091) Do not attempt to read os-release when linting
    # shellcheck disable=SC1091
    . /etc/os-release
    echo "$ID"
    echo "$VERSION_CODENAME"
    echo "$VERSION_ID"
)
EOM
    if [ -n "${BUILD_OS_VERSION_CODENAME}" ]; then
        build_os_ver="${BUILD_OS_VERSION_CODENAME}"
    else
        build_os_ver="${BUILD_OS_VERSION_ID}"
    fi
    BUILD_TAGS="${BUILD_TAGS} ${BUILD_OS_ID} ${build_os_ver}"
fi

if [ -e /sys/class/dmi/id/chassis_asset_tag ]; then
    if [ "$(cat /sys/class/dmi/id/chassis_asset_tag)" = "OracleCloud.com" ]; then
        BUILD_TAGS="${BUILD_TAGS} oci"
    elif [ "$(cat /sys/class/dmi/id/chassis_asset_tag)" = "Amazon EC2" ]; then
        BUILD_TAGS="${BUILD_TAGS} aws"
    fi
elif [ -e /sys/class/dmi/id/board_name ]; then
    if [ "$(cat /sys/class/dmi/id/board_name)" = "Google Compute Engine" ]; then
        BUILD_TAGS="${BUILD_TAGS} gce"
    fi
elif grep -q DataSourceAzure /run/cloud-init/status.json 2>/dev/null; then
    # This relies on cloud-init, but there doesn't appear to be any
    # hardware/etc way to determine if running on Azure.
    BUILD_TAGS="${BUILD_TAGS} azure"
fi

BUILD_TAGS="$(for i in ${BUILD_TAGS}; do echo "${i}"; done | sort | uniq | xargs)"

if [ "${LINT}" = "true" ]; then
    shellcheck "${BASE_DIR}/finnix-live-build"
    for script_dir in "${BASE_DIR}/tools" .rrpcid/jobs/*; do
        grep -l -E '^#!/(usr/)?bin/(env )?(ba)?sh' "${script_dir}"/* | xargs -r shellcheck
        grep -l -E '^#!/(usr/)?bin/(env )?python3' "${script_dir}"/* | xargs -r "${PYTHON}" -mflake8 --config=/dev/null --max-line-length=120
    done
fi

mkdir -p "${LOCK_DIR}"
lock "${LOCK_DIR}/${LOCK_NAME}.lock"

cd /
rm -rf "${LB_DIR}"
mkdir -p "${LB_DIR}"
cd "${LB_DIR}"

do_lb_config() {
    # Note that --source true also requires --apt-source-archives true

    lb config noauto \
        --apt-http-proxy "${APT_HTTP_PROXY}" \
        --apt-indices false \
        --apt-recommends false \
        --apt-source-archives false \
        --architectures "${ARCH}" \
        --archive-areas "main contrib non-free" \
        --binary-images "${BINARY_IMAGES}" \
        --bootappend-live 'boot=live quiet sshd passwd=finnix:linux' \
        --bootloaders "${BOOTLOADERS}" \
        --cache-indices true \
        --chroot-squashfs-compression-type "${SQUASHFS_COMP}" \
        --distribution bullseye \
        --firmware-chroot false \
        --hdd-label "$(echo "${PRODUCT_ID}" | tr '[:lower:]' '[:upper:]')" \
        --image-name "${PRODUCT_ID}" \
        --iso-application "${PRODUCT}" \
        --iso-preparer "${PRODUCT}" \
        --iso-publisher "${PRODUCT}" \
        --iso-volume "${PRODUCT} ${VERSION}" \
        --memtest "${MEMTEST}" \
        --source "${SOURCE_ISO}" \
        --source-images iso \
        --zsync false \
        --mode debian \
        --security true \
        --updates true \
        --backports true \
        "$@"
}

if [ "${ARCH}" = "riscv64" ]; then
    do_lb_config \
        --distribution unstable \
        --mirror-bootstrap http://ftp.ports.debian.org/debian-ports/ \
        --mirror-binary http://ftp.ports.debian.org/debian-ports/ \
        --keyring-packages "debian-archive-keyring debian-ports-archive-keyring" \
        --security false \
        --debootstrap-options --keyring=/usr/share/keyrings/debian-ports-archive-keyring.gpg
else
    do_lb_config
fi

mkdir -p "${LB_CACHE_DIR}"
if [ "${CACHE_FROZEN}" = "false" ]; then
    if [ -e "${LB_CACHE_DIR}/bootstrap/etc/hostname" ]; then
        if [ -n "$(find "${LB_CACHE_DIR}/bootstrap/etc/hostname" -mmin +1080)" ]; then
            rm -rf "${LB_CACHE_DIR}/bootstrap"
        fi
    else
        rm -rf "${LB_CACHE_DIR}/bootstrap"
    fi
    if [ -e "${LB_CACHE_DIR}/indices.bootstrap/pkgcache.bin" ]; then
        if [ -n "$(find "${LB_CACHE_DIR}/indices.bootstrap/pkgcache.bin" -mmin +1080)" ]; then
            rm -rf "${LB_CACHE_DIR}/indices.bootstrap" "${LB_CACHE_DIR}/contents.chroot"
        fi
    else
        rm -rf "${LB_CACHE_DIR}/indices.bootstrap" "${LB_CACHE_DIR}/contents.chroot"
    fi
    find "${LB_CACHE_DIR}"/packages.* -name '*.deb' -mtime +30 -delete 2>/dev/null || true
fi
if [ "${container}" = "systemd-nspawn" ] && [ -e "${LB_CACHE_DIR}/bootstrap/dev/console" ]; then
    # Restoring parts of bootstrap/dev/ created outside systemd-nspawn
    # will fail inside systemd-nspawn
    rm -rf "${LB_CACHE_DIR}/bootstrap"
fi
rm -rf "${LB_DIR}/cache"
ln -sf "${LB_CACHE_DIR}" "${LB_DIR}/cache"

for i in "${BASE_DIR}/hooks"/*.hook.*.in; do
    basefn="$(basename "$i" .in)"
    rm -f "${LB_DIR}/config/hooks/normal/${basefn}"
    render <"${i}" >"${LB_DIR}/config/hooks/normal/${basefn}"
done

HOOK_FILES_DIR="${LB_DIR}/config/includes.chroot_after_packages/hook-files"
mkdir -p "${HOOK_FILES_DIR}"
for i in "${BASE_DIR}/files/hooks"/*; do
    basefn="$(basename "$i")"
    render <"${i}" >"${HOOK_FILES_DIR}/${basefn}"
done
for i in "${BASE_DIR}/manpages"/*.md; do
    basefn="$(basename "$i" .md)"
    render <"${i}" | pandoc -s -t man -o "${HOOK_FILES_DIR}/${basefn}.1"
done

mkdir -p "${LB_DIR}/config/bootloaders/syslinux_common"
render <"${BASE_DIR}/syslinux/splash.svg" | rsvg-convert --format png --width 640 --height 480 >"${LB_DIR}/config/bootloaders/syslinux_common/splash.png"
cp "${BASE_DIR}/syslinux/isolinux.cfg" "${LB_DIR}/config/bootloaders/syslinux_common/"
mkdir -p "${LB_DIR}/config/bootloaders/grub-pc"
cp "${BASE_DIR}/grub"/*.cfg "${LB_DIR}/config/bootloaders/grub-pc/"
render <"${BASE_DIR}/grub/splash.svg" | rsvg-convert --format png --width 1920 --height 1080 >"${LB_DIR}/config/bootloaders/grub-pc/splash.png"
mkdir -p "${LB_DIR}/config/bootloaders/grub-pc/live-theme"
cp "${BASE_DIR}/grub/theme.txt" "${LB_DIR}/config/bootloaders/grub-pc/live-theme/"

cp "${BASE_DIR}/lists"/*.list.chroot "${LB_DIR}/config/package-lists/"

if [ -e "${BASE_DIR}/squashfs.sort" ]; then
    mkdir -p "${LB_DIR}/config/rootfs"
    cp "${BASE_DIR}/squashfs.sort" "${LB_DIR}/config/rootfs/squashfs.sort"
fi

# The in-squashfs initrds are unused; exclude them
mkdir -p "${LB_DIR}/config/rootfs"
cat <<"EOM" >"${LB_DIR}/config/rootfs/excludes"
boot/initrd.img*
initrd.img*
EOM

mkdir -p "${LB_DIR}/config/includes.chroot_after_packages/etc"
echo "${PRODUCT_ID}" >"${LB_DIR}/config/includes.chroot_after_packages/etc/hostname"
cat <<EOM >"${LB_DIR}/config/includes.chroot_after_packages/etc/hosts"
127.0.0.1	localhost
127.0.1.1	${PRODUCT_ID}

::1	ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff00::1	ip6-allnodes
ff00::2	ip6-allrouters
EOM

cat <<"EOM" >config/preseed/firmware-nonfree.cfg.chroot
firmware-ipw2x00 firmware-ipw2x00/license/accepted boolean true
EOM

if [ "${LINT}" = "true" ]; then
    grep -l -E '^#!/(usr/)?bin/(env )?(ba)?sh' "${LB_DIR}/config/hooks/normal"/*-finnix-*.hook.chroot | xargs -r shellcheck
    grep -l -E '^#!/(usr/)?bin/(env )?(ba)?sh' "${LB_DIR}/config/includes.chroot_after_packages/hook-files"/* | xargs -r shellcheck
    grep -l -E '^#!/(usr/)?bin/(env )?python3' "${LB_DIR}/config/hooks/normal"/*-finnix-*.hook.chroot | xargs -r "${PYTHON}" -mflake8 --config=/dev/null --max-line-length=120
    grep -l -E '^#!/(usr/)?bin/(env )?python3' "${LB_DIR}/config/includes.chroot_after_packages/hook-files"/* | xargs -r "${PYTHON}" -mflake8 --config=/dev/null --max-line-length=120
fi

if [ "${LINT}" = "true" ]; then
    rm -rf "${LINT_DIR}"
    echo "Lint completed without error"
    exit 0
fi

lb build

build_id="$(echo "${DATETIME}" | sed -e 's/ /_/g')"
if [ -n "${GIT_DESC}" ]; then
    build_id="${build_id}_${GIT_DESC}"
fi
build_size="$(stat -c "%s" "${LB_DIR}/${ISO_FILENAME}")"
mkdir -p "${BUILD_INFO_DIR}/${build_id}"
cp -a "${LB_DIR}"/*.contents "${BUILD_INFO_DIR}/${build_id}/"
cp -a "${LB_DIR}"/*.files "${BUILD_INFO_DIR}/${build_id}/"
cp -a "${LB_DIR}"/*.packages "${BUILD_INFO_DIR}/${build_id}/"
cp -a "${LB_DIR}"/*.packages.* "${BUILD_INFO_DIR}/${build_id}/"
echo "${build_size}" >"${BUILD_INFO_DIR}/${build_id}/${ISO_FILENAME}.size"
if [ "${SAVE_ISO}" = "true" ]; then
    cp -a "${LB_DIR}/${ISO_FILENAME}" "${BUILD_INFO_DIR}/${build_id}/${ISO_FILENAME}"
fi

ls -lsa "${LB_DIR}/${ISO_FILENAME}"
if command -v file >/dev/null; then
    file "${LB_DIR}/${ISO_FILENAME}"
fi
echo "Build: ${DATETIME} ${GIT_DESC} ${BUILD_TAGS}"
echo

if [ -n "${INFINIDASH_COHORT}" ] && command -v aws >/dev/null; then
    # Instantiate completed build on AWS Infinidash
    aws infinidash instantiate \
        --cohort "${INFINIDASH_COHORT}" \
        --filename "${ISO_FILENAME}" \
        --build-id "${DATETIME} ${GIT_DESC} ${BUILD_TAGS}" \
        "${LB_DIR}/${ISO_FILENAME}"
    echo "Build instantiated on AWS Infinidash ${INFINIDASH_COHORT} cohort"
    echo
fi

current_tmp_fn="$(mktemp)"
compare_tmp_fn="$(mktemp)"
diff_tmp_fn="$(mktemp)"
cut -f1 <"${BUILD_INFO_DIR}/${build_id}/chroot.packages.live" | sort >"${current_tmp_fn}"

for compare_link in "${BUILD_INFO_DIR}"/*; do
    [ -h "$compare_link" ] || continue
    compare_name="$(basename "${compare_link}")"
    compare_build_id="$(basename "$(readlink -f "${compare_link}")")"

    compare_build_size="$(cat "${compare_link}/${ISO_FILENAME}.size")"
    build_size_delta=$((build_size - compare_build_size))
    if [ "${build_size_delta}" -ge 1048576 ] || [ "${build_size_delta}" -le -1048576 ]; then
        echo "NOTE: Build size changed from build \"${compare_name}\" (${compare_build_id}):"
        echo "    - $((compare_build_size / 1048576)) MiB - ${compare_build_id}"
        echo "    + $((build_size / 1048576)) MiB - ${build_id}"
        echo
    fi

    cut -f1 <"${compare_link}/chroot.packages.live" | sort >"${compare_tmp_fn}"
    (diff "${compare_tmp_fn}" "${current_tmp_fn}" | grep -e '^[<>]') >"${diff_tmp_fn}" || true
    if [ -s "${diff_tmp_fn}" ]; then
        echo "NOTE: Packages names changed from build \"${compare_name}\" (${compare_build_id}):"
        cat "${diff_tmp_fn}"
        echo
    fi
done

rm -f "${compare_tmp_fn}" "${current_tmp_fn}" "${diff_tmp_fn}"
rm -f "${BUILD_INFO_DIR}/previous"
ln -s "${build_id}" "${BUILD_INFO_DIR}/previous"
