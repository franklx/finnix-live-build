#!/usr/bin/env python3

# SPDX-PackageSummary: finnix-live-build
# SPDX-FileComment: interfaces-convert
# SPDX-FileCopyrightText: Copyright (C) 2021-2022 Ryan Finnie
# SPDX-License-Identifier: MPL-2.0

# This program converts sections in /etc/network/interfaces to files in
# /etc/systemd/network/, and (if needed) from /etc/resolv.conf to
# /etc/systemd/resolved.conf, putting the systemd-resolved stub in its
# place.
#
# Note that this was built to translate entries built by live-boot, and
# is not meant to be a general-purpose e-n-i converter.

import configparser
import io
import ipaddress
import os
import shlex
import sys

try:
    import pyudev
except ImportError as e:
    pyudev = e


class InterfacesConvert:
    def __init__(self):
        self.files = {}
        self.replace_resolvconf = False
        if isinstance(pyudev, ImportError):
            self.udev_context = None
        else:
            self.udev_context = pyudev.Context()

    def get_udev_properties(self, interface_name):
        if self.udev_context is None:
            return
        try:
            device = pyudev.Devices.from_path(
                self.udev_context, "/sys/class/net/{}".format(interface_name)
            )
        except pyudev.DeviceNotFoundAtPathError:
            return
        if "ID_PATH" not in device.properties or "ID_PATH_TAG" not in device.properties:
            return
        return dict(device.properties)

    def systemd_config(self):
        config = configparser.ConfigParser()
        config.optionxform = str
        return config

    def generate_systemd_conf(self, config, filename, device_properties=None):
        with io.StringIO() as f:
            if device_properties is not None:
                for k, v in device_properties.items():
                    print("# {}={}".format(k, shlex.quote(v)), file=f)
                print(file=f)
            config.write(f, space_around_delimiters=False)
            self.files[filename] = f.getvalue()

    def process_section(self, section):
        if "iface" not in section:
            return
        interface_name = section["iface"][0]
        if section["iface"][2] == "loopback":
            return
        elif not os.path.exists("/sys/class/net/{}".format(interface_name)):
            return

        device_properties = self.get_udev_properties(interface_name)
        if device_properties is None:
            id_path = None
            interface_fn_id = interface_name
        else:
            id_path = device_properties["ID_PATH"]
            interface_fn_id = device_properties["ID_PATH_TAG"]

        filename = "/etc/systemd/network/10-{}.network".format(interface_fn_id)
        if (section["iface"][1] != "inet") or (
            section["iface"][2] not in ("dhcp", "static")
        ):
            output = self.systemd_config()
            if id_path is None:
                output["Match"] = {"Name": interface_name}
            else:
                output["Match"] = {"Path": id_path}
            output["Link"] = {"Unmanaged": "yes"}
            self.generate_systemd_conf(output, filename)
            return

        output = self.systemd_config()
        if id_path is None:
            output["Match"] = {"Name": interface_name}
        else:
            output["Match"] = {"Path": id_path}
        output["Link"] = {}
        output["Network"] = {}
        if ("address" in section) and ("netmask" in section):
            output["Network"]["Address"] = ipaddress.ip_interface(
                "{}/{}".format(section["address"][0], section["netmask"][0])
            ).with_prefixlen
            if "gateway" in section:
                output["Network"]["Gateway"] = section["gateway"][0]
        else:
            output["Network"]["DHCP"] = "yes"
        if "allow-hotplug" in section:
            output["Link"]["RequiredForOnline"] = "no"
        self.generate_systemd_conf(output, filename, device_properties)
        return (interface_name, filename)

    def convert_interfaces(self):
        if not os.path.exists("/etc/network/interfaces"):
            return

        rewritten_interfaces = ""
        section = {}
        section_text = ""
        section_text_commented = ""
        with open("/etc/network/interfaces") as f:
            for raw_line in f:
                line = raw_line.strip()
                if line == "" and section:
                    ret = self.process_section(section)
                    if ret:
                        rewritten_interfaces += "# Interface {} migrated to {}\n".format(
                            ret[0], ret[1]
                        )
                        rewritten_interfaces += section_text_commented + "\n"
                    else:
                        rewritten_interfaces += section_text + "\n"
                    section = {}
                    section_text = ""
                    section_text_commented = ""
                    continue
                ls = line.split(" ")
                if not ls[0].startswith("#"):
                    section[ls[0]] = ls[1:]
                section_text += raw_line
                section_text_commented += "#" + raw_line

        if section:
            ret = self.process_section(section)
            if ret:
                rewritten_interfaces += "# Interface {} migrated to {}\n".format(
                    ret[0], ret[1]
                )
                rewritten_interfaces += section_text_commented + "\n"
            else:
                rewritten_interfaces += section_text + "\n"

        self.files["/etc/network/interfaces"] = rewritten_interfaces

    def convert_resolv(self):
        if not os.path.exists("/etc/systemd/resolved.conf"):
            return
        if not os.path.exists("/etc/resolv.conf"):
            self.replace_resolvconf = True
            return

        nameservers = []
        domains = []
        with open("/etc/resolv.conf") as f:
            for line in f:
                line = line.strip()
                ls = line.split(" ")
                if ls[0] == "nameserver":
                    if ls[1] == "127.0.0.53":
                        continue
                    nameservers.append(ls[1])
                elif ls[0] in ("search", "domain"):
                    for s in ls[1:]:
                        if s == ".":
                            continue
                        domains.append(s)

        if nameservers or domains:
            resolved = self.systemd_config()
            resolved.read("/etc/systemd/resolved.conf")
            if "Resolve" not in resolved:
                resolved["Resolve"] = {}
            if nameservers:
                resolved["Resolve"]["DNS"] = " ".join(nameservers)
            if domains:
                resolved["Resolve"]["Domains"] = " ".join(domains)
            self.generate_systemd_conf(resolved, "/etc/systemd/resolved.conf")

        self.replace_resolvconf = True

    def write_files(self):
        for fn in self.files:
            with open(fn, "w") as f:
                f.write(self.files[fn])

        if self.replace_resolvconf:
            try:
                os.remove("/etc/resolv.conf")
            except FileNotFoundError:
                pass
            os.symlink("/run/systemd/resolve/stub-resolv.conf", "/etc/resolv.conf")

    def main(self):
        self.convert_interfaces()
        self.convert_resolv()
        self.write_files()


if __name__ == "__main__":
    sys.exit(InterfacesConvert().main())
