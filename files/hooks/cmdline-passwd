#!/usr/bin/env python3

# SPDX-PackageSummary: finnix-live-build
# SPDX-FileComment: cmdline-passwd - Set user passwords from kernel command line
# SPDX-FileCopyrightText: Copyright (C) 2021-2022 Ryan Finnie
# SPDX-License-Identifier: MPL-2.0

# Kernel command-line usage examples:
#     passwd=foo  (root assumed)
#     passwd=root:foo passwd=finnix:bar
#     passwd=root:$1$QnvsFWnz$MppFa1JL0xsMjB/VQwvwv.
#
# "sshd_password" is accepted as a legacy equivalent to "passwd"

import os
import re
import shlex
import subprocess
import sys


RE_ENCRYPTED = re.compile(r"\$.{1,2}\$")


def parse_cmdline(cmdline_text):
    cmdline = []
    for i in shlex.split(cmdline_text):
        if "=" in i:
            cmdline.append(tuple(i.split("=", 1)))
        else:
            cmdline.append((i, None))

    return cmdline


def main():
    if not os.path.exists("/proc/cmdline"):
        return

    with open("/proc/cmdline") as f:
        cmdline = parse_cmdline(f.read())

    userpasses = []
    userpasses_encrypted = []
    for userpass in [
        v for k, v in cmdline if k in ("passwd", "sshd_password") and v is not None
    ]:
        if ":" not in userpass:
            userpass = "root:" + userpass
        username, password = userpass.split(":", 1)
        if RE_ENCRYPTED.match(password):
            userpasses_encrypted.append(userpass)
        else:
            userpasses.append(userpass)

    if userpasses:
        subprocess.run(
            ["chpasswd"],
            input=("\n".join(sorted(userpasses)) + "\n").encode("UTF-8"),
            check=True,
        )

    if userpasses_encrypted:
        subprocess.run(
            ["chpasswd", "--encrypted"],
            input=("\n".join(sorted(userpasses_encrypted)) + "\n").encode("UTF-8"),
            check=True,
        )


if __name__ == "__main__":
    sys.exit(main())
